#X3D V3.2 utf8
PROFILE Interchange
COMPONENT CubeMapTexturing:3

# Nice water by shader effects.
# We have 1 effect that modifies normals per fragment, to simulate waves.
# And 2nd effect that adds reclection / refraction from environment cube map.
#
# We also have an alternative effect for normals: instead of taking them
# from the texture, we can calculate them from a 3d noise.
# This is commented out for now,
# as it is quite slower and causes awful bugs on Radeon X1600 (fglrx).
# But works perfectly on NVidia GeForce 450 (although also is slower,
# but from ~400 FPS to ~200 FPS so still very real-time :) ).

EXTERNPROTO PlaneNotTesselated [
  inputOutput SFBool solid
] [ "../x3d/useful_proto_plane_tess.x3dv#PlaneNotTesselated" ]

EXTERNPROTO PlaneTesselated [
  inputOutput SFBool solid
] [ "../x3d/useful_proto_plane_tess.x3dv#PlaneTesselated" ]

# ----------------------------------------------------------------------------
# Inline castle_hall level,
# with some parts that would obstruct nice reflections removed,
# with better sky (and not so black, so it's visible in reflections),
# with different camera.

# Camera settings "encoded" in the VRML declaration below :
# direction 0.0097326347604394 -0.0124771371483802 -0.0122313322499394
# up 0.3761610388755798 -0.4821816682815551 0.7911880612373352
# gravityUp 0 -4.3711388286737929E-008 1
Transform {
  translation -0.7321556210517883 0.7535160779953002 1.0205278396606445
  rotation 1 0 -0 1.5707963705062866
  children DEF View Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation -0.1104519069194793 -0.940571904182434 -0.3211302757263183 2.5159108638763428
  }
}

EXTERNPROTO KambiNavigationInfo [
  inputOnly   SFBool   set_bind
  inputOutput MFFloat  avatarSize
  inputOutput SFBool   headlight
  inputOutput SFFloat  speed
  inputOutput MFString type
  inputOutput SFFloat  visibilityLimit
  outputOnly  SFBool   isBound
  initializeOnly  SFBool   timeOriginAtLoad
] [ "urn:vrmlengine.sourceforge.net:node:KambiNavigationInfo",
    "http://vrmlengine.sourceforge.net/fallback_prototypes.x3dv#KambiNavigationInfo"
]

KambiNavigationInfo {
  headlight TRUE
  timeOriginAtLoad TRUE
  avatarSize [ 0.05, 0.10 ]
  type "FLY"
}

KambiHeadLight {
  ambientIntensity 0.5
  intensity 0.5
  color 1 1 1
}

Transform {
  rotation 1 0 0 1.57
  children

  Background {
     backUrl "../skies/foggy_sky_back.png"
     bottomUrl "../skies/foggy_sky_bottom.png"
     frontUrl "../skies/foggy_sky_front.png"
     leftUrl "../skies/foggy_sky_left.png"
     rightUrl "../skies/foggy_sky_right.png"
     topUrl "../skies/foggy_sky_top.png"
  }
}

Transform {
  children Transform {
    scale 0.05 0.05 0.05
    translation 0 0 -0.1
    children [
      PointLight {
        location  10  10 10
        color 0.3 0.3 0.3
      }
      PointLight {
        location -10 -10 10
        color 0.3 0.3 0.3
      }
      Inline { url "castle_hall_for_water_demo.wrl" }
    ]
  }
}

DEF Timer TimeSensor { loop TRUE }

# ----------------------------------------------------------------------------
# Waves geometry.
# This time, geometry is trivial, just a flat plane, we only animate
# normal map.

Collision {
  enabled FALSE
  children Shape {
    appearance Appearance {
      material DEF MA_Material Material {
        diffuseColor 0.5 0.5 1
        specularColor 1 1 1
        shininess 0.0976563021540641
        transparency 0.2
      }
#      texture ImageTexture { url "../textures/test_texture.png" }
      effects [
        Effect {
          language "GLSL"
          initializeOnly SFNode normalMap
            MovieTexture { url "baked_normals_low_res_seamless/baked_normals_%4d.png" loop TRUE }
          parts [
            EffectPart { type "VERTEX" url "water_normalmap.vs" }
            EffectPart { type "FRAGMENT" url "water_normalmap.fs" }
          ]
        }
        # DEF NoiseEffect Effect {
        #   language "GLSL"
        #   initializeOnly SFNode white_noise ImageTexture3D {
        #     url "../textures/white_noise_3d.dds"
        #     repeatS TRUE
        #     repeatT TRUE
        #     repeatR TRUE
        #     textureProperties TextureProperties { minificationFilter "NEAREST_PIXEL" }
        #   }
        #   inputOnly SFTime time
        #   ROUTE Timer.time TO NoiseEffect.time
        #   parts [
        #     EffectPart { type "VERTEX" url "water_normalnoise.vs" }
        #     EffectPart { type "FRAGMENT" url "../compositing_shaders/noise.glsl" }
        #     EffectPart { type "FRAGMENT" url "water_normalnoise.fs" }
        #   ]
        # }
        DEF ReflectRefractEffect Effect {
          language "GLSL"
          initializeOnly SFNode envMap
            DEF GenTex1 GeneratedCubeMapTexture {
              #update "ALWAYS"
              update "NEXT_FRAME_ONLY"
              size 512
            }
          inputOutput SFMatrix3f cameraRotationInverseMatrix
            1 0 0
            0 1 0
            0 0 1
          parts [
            EffectPart { type "VERTEX" url "water_reflect_refract.vs" }
            EffectPart { type "FRAGMENT" url "water_reflect_refract.fs" }
          ]
        }
      ]
    }
    geometry PlaneTesselated { solid FALSE }
  }
}

ROUTE View.cameraRotationInverseMatrix TO ReflectRefractEffect.cameraRotationInverseMatrix

# ----------------------------------------------------------------------------
# Script to change gen cubemap update to NEXT_FRAME_ONLY on space press.
# NEXT_FRAME_ONLY will automatically change to NONE after next frame,
# so after this, you will need to keep pressing space again to force update
# of the cubemap texture.

DEF KeyS KeySensor { }

DEF Scr Script {
  inputOnly SFString key_press
  outputOnly SFString tex_update

  url "kambiscript:

function key_press(value, timestamp)
  when (value = ' ',
    tex_update := 'NEXT_FRAME_ONLY'
  )
"
}

ROUTE KeyS.keyPress TO Scr.key_press
ROUTE Scr.tex_update TO GenTex1.update
