#X3D V3.2 utf8
PROFILE Interchange
COMPONENT Rendering:5

ClipPlane { plane 0 1 0 0 }
# if below is enabled, you will only see an infinitely thin slice of the geometry
ClipPlane { plane 0 -1 0 0 enabled FALSE }

# uncomment these, to see that local clip planes will get ignored first
# (most OpenGL support only 6 clipping planes, and following X3D spec
# the "more global" clip planes are more important)
# ClipPlane { plane 0 1 0 0 }
# ClipPlane { plane 0 1 0 0 }
# ClipPlane { plane 0 1 0 0 }
# ClipPlane { plane 0 1 0 0 }
# ClipPlane { plane 0 1 0 0 }
# ClipPlane { plane 0 1 0 0 }

# Some geometry
Transform { translation -1.5 0 -1
  children DEF T Shape {
    appearance Appearance { material Material { } }
    geometry Teapot { solid FALSE } } }
Transform { translation  1.5 0 -1 children USE T }
DEF Tea1Trnsf Transform {
    translation  1.5 0 1
    children [
        USE T
        # notice that this plane is defined in local coords of this Transform,
        # and it affects only the one teapot within this Transform
        ClipPlane { plane 1 0 0 0 }
    ]
}
Transform {
    translation -1.5 0 1
    children [
        ClipPlane { plane 1 0 0 0 }
        # this teapot rotates, but the ClipPlane remains fixed
        DEF Tea2Trnsf Transform { children USE T }
    ]
}

DEF AnimatedPlane ClipPlane { plane 1 0 0 1 }

DEF Timer TimeSensor { loop TRUE cycleInterval 4 }

# There is no interpolator for vec4f values in the standard?
# No problem, we'll make a simple interpolator using KambiScript.
DEF Vec4Interpolator Script {
  inputOnly SFFloat set_fraction
  outputOnly SFVec4f value_changed

  # Maybe add a KambiScript frac()? Maybe add a KambiScript lerp()?
  # Would make script simpler.

  # helper variable for set_fraction, equal to frac(value).
  initializeOnly SFFloat val 0

  initializeOnly SFVec4f keyValue0  1 0  0 1
  initializeOnly SFVec4f keyValue1  0 0  1 1
  initializeOnly SFVec4f keyValue2 -1 0  0 1
  initializeOnly SFVec4f keyValue3  0 0 -1 1

  url "kambiscript:

function set_fraction(value, timestamp)
  val := value * 4;
  if (val <= 1, val := val    ; value_changed := (1-val) * keyValue0 + val * keyValue1,
  if (val <= 2, val := val - 1; value_changed := (1-val) * keyValue1 + val * keyValue2,
  if (val <= 3, val := val - 2; value_changed := (1-val) * keyValue2 + val * keyValue3,
                val := val - 3; value_changed := (1-val) * keyValue3 + val * keyValue0)))
"
}

ROUTE Timer.fraction_changed TO Vec4Interpolator.set_fraction
ROUTE Vec4Interpolator.value_changed TO AnimatedPlane.plane

# 2nd Animation clock
DEF Clock TimeSensor {
    cycleInterval 20.0
    loop TRUE
}

# Rotation path
DEF rotPath OrientationInterpolator {
    key [ 0.0 0.5 1.0 ]
    keyValue [
        0.0 1.0 0.0 -6.28,
        0.0 1.0 0.0 -3.14,
        0.0 1.0 0.0 0.0,
    ]
}

ROUTE Clock.fraction_changed TO rotPath.set_fraction
ROUTE rotPath.value_changed TO Tea1Trnsf.set_rotation
ROUTE rotPath.value_changed TO Tea2Trnsf.set_rotation
