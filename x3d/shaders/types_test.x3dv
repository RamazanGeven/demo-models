#X3D V3.2 utf8
PROFILE Interchange

# Test passing various VRML types to various GLSL types.
# If all is white, then the test succeded.
# If you see any other colors (typically, red vertical stripes),
# then some uniform is not correctly set.

Shape {
  appearance Appearance {
    shaders ComposedShader {
      language "GLSL"
      parts ShaderPart { type "FRAGMENT" url "glsl_types.fs" }
      initializeOnly SFBool my_bool TRUE
      initializeOnly SFLong my_long 666
      initializeOnly SFInt32 my_int32 1234
      initializeOnly SFColor my_color 1 1 1
      initializeOnly SFRotation my_rotation 1 1 1 1

      initializeOnly SFFloat my_float 1.0
      initializeOnly SFVec2f my_vec2 1 1
      initializeOnly SFVec3f my_vec3 1 1 1
      initializeOnly SFVec4f my_vec4 1 1 1 1
      initializeOnly SFMatrix3f my_mat3
        1 1 1
        1 1 1
        1 1 1
      initializeOnly SFMatrix4f my_mat4
        1 1 1 1
        1 1 1 1
        1 1 1 1
        1 1 1 1

      initializeOnly SFDouble my_double 1.0
      initializeOnly SFTime my_time 1.0
      initializeOnly SFVec2d my_dvec2 1 1
      initializeOnly SFVec3d my_dvec3 1 1 1
      initializeOnly SFVec4d my_dvec4 1 1 1 1
      initializeOnly SFMatrix3d my_dmat3
        1 1 1
        1 1 1
        1 1 1
      initializeOnly SFMatrix4d my_dmat4
        1 1 1 1
        1 1 1 1
        1 1 1 1
        1 1 1 1

      # Now the same for array types.

      initializeOnly MFBool a_bool [FALSE TRUE]
      initializeOnly MFLong a_long [0 666]
      initializeOnly MFInt32 a_int32 [0 1234]
      initializeOnly MFColor a_color [0 0 0, 1 1 1]
      initializeOnly MFRotation a_rotation [1 0 0 0, 1 1 1 1]

      initializeOnly MFFloat a_float [0 1]
      initializeOnly MFVec2f a_vec2 [0 0, 1 1]
      initializeOnly MFVec3f a_vec3 [0 0 0, 1 1 1]
      initializeOnly MFVec4f a_vec4 [0 0 0 0, 1 1 1 1]
      initializeOnly MFMatrix3f a_mat3
      [ 0 0 0   0 0 0   0 0 0,
        1 1 1   1 1 1   1 1 1 ]
      initializeOnly MFMatrix4f a_mat4
      [ 0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0,
        1 1 1 1   1 1 1 1   1 1 1 1   1 1 1 1 ]

      initializeOnly MFDouble a_double [0 1]
      initializeOnly MFTime a_time [0 1]
      initializeOnly MFVec2d a_dvec2 [0 0, 1 1]
      initializeOnly MFVec3d a_dvec3 [0 0 0, 1 1 1]
      initializeOnly MFVec4d a_dvec4 [0 0 0 0, 1 1 1 1]
      initializeOnly MFMatrix3d a_dmat3
      [ 0 0 0   0 0 0   0 0 0,
        1 1 1   1 1 1   1 1 1 ]
      initializeOnly MFMatrix4d a_dmat4
      [ 0 0 0 0   0 0 0 0   0 0 0 0   0 0 0 0,
        1 1 1 1   1 1 1 1   1 1 1 1   1 1 1 1 ]
    }
  }
  geometry Box { solid FALSE }
}

# camera is inside the non-solid box, just to fill whole
# screen with glsl_types.fs shader.
Viewpoint { position 0 0 0 }
NavigationInfo {
  type "FLY"
}