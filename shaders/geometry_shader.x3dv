#X3D V3.2 utf8
PROFILE Interchange
COMPONENT Shaders:1

# Geometry shaders simple tests.
# Read the comments inside GLSL code inside --- they contain a lot of notes
# how to use geometry shaders.

# Basic geometry shader ------------------------------------------------------

# Note that you *have* to specify a vertex shader if you want to use
# a geometry shader. And for newer OpenGL/GLSL, if you specify a vertex shader,
# you also have to specify a fragment shader... So, no cheating:
# if you use shaders, you have to do everything by shaders.

Shape {
  appearance Appearance {
    shaders ComposedShader {
      language "GLSL"
      parts [
        ShaderPart { type "VERTEX" url "data:text/plain,
          uniform mat4 castle_ModelViewMatrix;
          uniform mat4 castle_ProjectionMatrix;
          attribute vec4 castle_Vertex;
          void main(void)
          {
            gl_Position = castle_ProjectionMatrix * (castle_ModelViewMatrix * castle_Vertex);
          }" }
        ShaderPart { type "GEOMETRY" url "data:text/plain,
          /* Your geometry shaders must declare GLSL version 1.50 or higher.
             Earlier versions of GLSL geometry shaders are not supported
             by view3dscene, see
             http://castle-engine.sourceforge.net/x3d_implementation_shaders.php#section_geometry_old
          */
          #version 150

          /* Note that 'in' type must match the rendered X3D geometry type.
             - For filled shapes, you want 'triangles'.
             - For line sets, you want 'lines'.
             - For point sets, you want 'points'.
             - GLSL also allows 'lines_adjacency', 'triangles_adjacency'
               types as input. But they need special support from
               the OpenGL application (our X3D browser), and are simply
               not implemented in view3dscene for now. They will require
               adding ComposedShader.geometryInputType field
               (or maybe just SFBool ComposedShader.adjacency) to cause
               special primitive generation code.
             If you specify an invalid 'in' type, right now you will get
             ugly OpenGL errors 'invalid operation'. */
          layout(triangles) in;

          /* On the other hand, the 'out' type is completely under your
             (shader author) control.
             Allowed values (as of GLSL 1.50) are
             'points', 'line_strip', 'triangle_strip'. */
          /* layout(triangle_strip, max_vertices = 3) out; */
          layout(points, max_vertices = 3) out;

          void main() {
            for(int i = 0; i < gl_in.length(); i++) {
              gl_Position = gl_in[i].gl_Position;
              /* do anything, just to see that geometry shader works */
              gl_Position.y += 2.0;
              EmitVertex();
            }
            EndPrimitive();
          }" }
        ShaderPart { type "FRAGMENT" url "data:text/plain,
          void main(void)
          {
            gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);
          }" }
      ]
    }
  }
  geometry Teapot { }
}

# Extend geometry shader to pass attribute tex_coord ---------------------------

Transform { translation 3 0 0 children
Shape {
  appearance Appearance {
    shaders ComposedShader {
      language "GLSL"
      inputOutput SFNode myTexture ImageTexture { url "../textures/test_texture.png" }
      parts [
        ShaderPart { type "VERTEX" url "data:text/plain,
          uniform mat4 castle_ModelViewMatrix;
          uniform mat4 castle_ProjectionMatrix;
          attribute vec4 castle_Vertex;
          varying vec2 tex_coord;
          void main(void)
          {
            tex_coord = castle_Vertex.xy * 2.0;
            gl_Position = castle_ProjectionMatrix * (castle_ModelViewMatrix * castle_Vertex);
          }" }
        ShaderPart { type "GEOMETRY" url "data:text/plain,
          #version 150

          layout(triangles) in;
          layout(triangle_strip, max_vertices = 3) out;

          in vec2 tex_coord[CASTLE_GEOMETRY_INPUT_SIZE];
          out vec2 frag_tex_coord;

          void main() {
            for(int i = 0; i < gl_in.length(); i++) {
              gl_Position = gl_in[i].gl_Position;
              /* gl_Position.y += 2.0; */

              /* pass through other vertex data */
              frag_tex_coord = tex_coord[i];

              EmitVertex();
            }
            EndPrimitive();
          }" }
        ShaderPart { type "FRAGMENT" url "data:text/plain,
          uniform sampler2D myTexture;
          varying vec2 frag_tex_coord;
          void main(void)
          {
            gl_FragColor = texture2D(myTexture, frag_tex_coord);
          }" }
      ]
    }
  }
  geometry Teapot { }
}
}

# ----------------------------------------------------------------------------
# Pass vertex in object space to geometry shader, this allows for some sensible
# tricks

Transform { translation 0 -3 0 children
Shape {
  appearance Appearance {
    shaders ComposedShader {
      language "GLSL"
      inputOutput SFNode myTexture ImageTexture { url "../textures/test_texture.png" }
      parts [
        ShaderPart { type "VERTEX" url "data:text/plain,
          /* For demo, this example has all shaders on GLSL 1.50 level. */
          #version 150
          attribute vec4 castle_Vertex;
          out vec2 tex_coord;
          void main(void)
          {
            tex_coord = castle_Vertex.xy * 2.0;
            gl_Position = castle_Vertex;
          }" }
        ShaderPart { type "GEOMETRY" url "data:text/plain,
          #version 150

          uniform mat4 castle_ModelViewMatrix;
          uniform mat4 castle_ProjectionMatrix;

          layout(triangles) in;
          layout(triangle_strip, max_vertices = 3) out;

          in vec2 tex_coord[CASTLE_GEOMETRY_INPUT_SIZE];
          out vec2 frag_tex_coord;

          void main() {
            for(int i = 0; i < gl_in.length(); i++) {
              gl_Position = gl_in[i].gl_Position;
              gl_Position.xy = vec2(gl_Position.y, -gl_Position.x);
              /* for demo, this transforms by projection + modelview in geometry shader */
              gl_Position = castle_ProjectionMatrix * (castle_ModelViewMatrix * gl_Position);

              /* pass through other vertex data */
              frag_tex_coord = tex_coord[i];

              EmitVertex();
            }
            EndPrimitive();
          }" }
        ShaderPart { type "FRAGMENT" url "data:text/plain,
          #version 150
          /* PLUG-DECLARATIONS */
          uniform sampler2D myTexture;
          in vec2 frag_tex_coord;
          void main(void)
          {
            gl_FragColor = texture2D(myTexture, frag_tex_coord);
          }" }
      ]
    }
  }
  geometry Teapot { }
}
}
