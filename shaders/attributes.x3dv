#X3D V3.2 utf8
PROFILE Interchange
COMPONENT Shaders:1

Shape {
  appearance Appearance {
    material Material { diffuseColor 1 1 0 }
    shaders ComposedShader {
      language "GLSL"
      parts [
        ShaderPart { type "VERTEX" url "data:text/plain,
          uniform mat4 castle_ModelViewMatrix;
          uniform mat4 castle_ProjectionMatrix;
          uniform mat3 castle_NormalMatrix;
          attribute vec4 castle_Vertex;
          attribute vec3 castle_Normal;

          varying vec4 color;

          attribute float height;

          void main(void)
          {
            vec4 localv = castle_Vertex;
            localv.y += height;
            vec3 v = vec3(castle_ModelViewMatrix * localv);

            vec3 normal = normalize(castle_NormalMatrix * castle_Normal);
            vec3 light = normalize(-v);

            color =
              vec4(1.0, 1.0, 0.0, 1.0) * max(dot(normal, light), 0.0);

            gl_Position = castle_ProjectionMatrix * vec4(v, 1.0);
          }" }
        ShaderPart { type "FRAGMENT" url "data:text/plain,
          varying vec4 color;
          void main(void)
          {
            gl_FragColor = color;
          }" }
      ]
    }
  }
  geometry ElevationGrid {
    height [ 0 0 0 0 0 0 0 0 0 ]
    xDimension 3
    zDimension 3
    creaseAngle 4
    # pass heights as GLSL attribute
    attrib FloatVertexAttribute { name "height"
      value [ 0.1 0.2 0.3
              0.1 0.7 0.2
              0.4 0.3 0.1 ] numComponents 1 }
  }
}

# Test that shader with attribute result above is the same
Transform { translation 2 0 0
children Shape {
  appearance Appearance { material Material { diffuseColor 1 1 0 } }
  geometry ElevationGrid {
    height [ 0.1 0.2 0.3 0.1 0.7 0.2 0.4 0.3 0.1 ]
    xDimension 3
    zDimension 3
    creaseAngle 4
  }
}
}
