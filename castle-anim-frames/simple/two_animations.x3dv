#X3D V3.0 utf8
PROFILE Immersive

# This X3D file demonstrates how to include 2 KAnim animations in a single X3D file.
# We use IMPORT to create new names for the inlined animations
# (otherwise, the KAnim animation is always called "animation").
# We then use CastleScript to show only the one (playing)
# animation at a given moment.
#
# This way you can load this file in Castle Game Engine TCastleScene,
# and play them like
# Scene.PlayAnimation('dying') or Scene.PlayAnimation('flying').

# import flying from flying.castle-anim-frames --------------------------------------------

DEF FlyingSwitch Switch {
  whichChoice 0 # both animations are visible at the initial pose, to easily compare them
  children DEF Flying Inline { url "raptor.castle-anim-frames" }
}
IMPORT Flying.animation AS flying

# import dying from dying.castle-anim-frames ----------------------------------------------

DEF DyingSwitch Switch {
  whichChoice 0 # both animations are visible at the initial pose, to easily compare them
  children DEF Dying Inline { url "sphere.castle-anim-frames" }
}
IMPORT Dying.animation AS dying

# toggle visibility of objects -----------------------------------------------

DEF MyScript Script {
  inputOutput SFBool flyingActive FALSE
  inputOutput SFBool dyingActive FALSE
  outputOnly SFInt32 flyingWhichChoice
  outputOnly SFInt32 dyingWhichChoice
  url [
"castlescript:
function flyingActive(value, timestamp)
  when(value,
    flyingWhichChoice := 0;
    dyingWhichChoice := -1
  )

function dyingActive(value, timestamp)
  when(value,
    flyingWhichChoice := -1;
    dyingWhichChoice := 0
  )
"
  ]
}

ROUTE flying.isActive TO MyScript.flyingActive
ROUTE MyScript.flyingWhichChoice TO FlyingSwitch.whichChoice
ROUTE dying.isActive TO MyScript.dyingActive
ROUTE MyScript.dyingWhichChoice TO DyingSwitch.whichChoice
