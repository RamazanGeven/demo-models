#X3D V3.0 utf8
PROFILE Immersive

# Demonstrates how to include two castle-anim-frames animations
# in a single X3D file.
# - We use IMPORT to rename the inlined animations.
# - We use Switch and BooleanFilter X3D nodes
#   to show only the one (playing) animation at a given moment.
#
# Note that you could also just define two animations inside
# a single castle-anim-frames file, and avoid this complication.
# However, this approach is flexible for all the occasions
# when you need to "mix" the animations from different 3D files.
#
# This way you can load this file in Castle Game Engine TCastleScene,
# and play animations from code like
# Scene.PlayAnimation('dying') or Scene.PlayAnimation('flying').
#
# Note that for this to work 100% reliably, the underlying
# animations should not have loop=TRUE. With loop=TRUE,
# time sensors play automatically when the scene loads,
# and this causes a bit of confusion for the Scene.PlayAnimation
# as it doesn't stop the automatically playing animation OK.
# To loop reliably, just use the paForceLooping parameter for
# Scene.PlayAnimation call.

DEF animation_switch Switch {
  whichChoice 0
  children [
    DEF flying_inline Inline { url "cube_opening.castle-anim-frames" }
    DEF dying_inline Inline { url "sphere_x3d.castle-anim-frames" }
  ]
}

IMPORT flying_inline.animation AS flying
IMPORT dying_inline.animation AS dying

DEF flying_filter BooleanFilter { }
DEF flying_trigger IntegerTrigger { integerKey 0 }
ROUTE flying.isActive TO flying_filter.set_boolean
ROUTE flying_filter.inputTrue TO flying_trigger.set_boolean
ROUTE flying_trigger.triggerValue TO animation_switch.whichChoice

DEF dying_filter BooleanFilter { }
DEF dying_trigger IntegerTrigger { integerKey 1 }
ROUTE dying.isActive TO dying_filter.set_boolean
ROUTE dying_filter.inputTrue TO dying_trigger.set_boolean
ROUTE dying_trigger.triggerValue TO animation_switch.whichChoice
